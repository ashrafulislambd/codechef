{"category_name":"medium","status":"success","problem_code":"PATTMATC","problem_name":"Pattern matching","body":"<span class=\"solution-visible-txt\">All submissions for this problem are available.<\/span><h3> Read problems statements in <a target=\"_blank\" href=\"http:\/\/www.codechef.com\/download\/translated\/LTIME28\/mandarin\/PATTMATC.pdf\">Mandarin Chinese <\/a> , <a target=\"_blank\" href=\"http:\/\/www.codechef.com\/download\/translated\/LTIME28\/russian\/PATTMATC.pdf\">Russian<\/a> and <a target=\"_blank\" href=\"http:\/\/www.codechef.com\/download\/translated\/LTIME28\/vietnamese\/PATTMATC.pdf\">Vietnamese<\/a><\/h3>\n<p>You are given a string <b>S<\/b>, made of lowercase Latin letters.<\/p>\n<p>You are also given a <i>wildcard<\/i> string <b>T<\/b>, containing lowercase latin letters and asterisks (symbol <tt>*<\/tt>).<\/p>\n<p>Both the strings are 1-indexed.<\/p>\n<p><i>Wildcard<\/i> string <b>T<\/b> is said to <i>generate<\/i> a string <b>P<\/b> if and only if <b>P<\/b> can be obtained from <b>T<\/b> by replacing <b>all<\/b> the asterisks with arbitrary (possibly empty) lowercase Latin letter strings.<\/p>\n<p>Consider the <b>i<\/b><sup>th<\/sup> symbol of the string <b>S<\/b>. Let's calculate the smallest index <b>p<sub>i<\/sub> \u2265 i<\/b> such that the substring <b>S<sub>i<\/sub><\/b>...<b>S<sub>p<sub>i<\/sub><\/sub><\/b> contains at least one of the strings generated by <i>wildcard<\/i> string <b>T<\/b>. In case any such index <b>p<sub>i<\/sub><\/b> doesn't exist, then <b>p<sub>i<\/sub> = -1<\/b>.<\/p>\n<p>Your goal is to calculate all the values <b>p<sub>1<\/sub><\/b>, <b>p<sub>2<\/sub><\/b>, ... , <b>p<sub>|S|<\/sub><\/b>.<\/p>\n<h3>Input<\/h3>\n<p>The first line of input contains an integer <b>Tn<\/b> denoting the number of test cases. The description of <b>Tn<\/b> test cases follows.<\/p>\n<p>The first line of each test case contains a <i>wildcard<\/i> string <b>T<\/b>.<\/p>\n<p>The second line of the test case contains a lowercase Latin string <b>S<\/b>.<\/p>\n<h3>Output<\/h3>\n<p>For each test case, output a single line containing <b>|S|<\/b> space-separated integers, denoting <b>p<sub>1<\/sub><\/b>, <b>p<sub>2<\/sub><\/b>, ..., <b>p<sub>|S|<\/sub><\/b>.<\/p>\n<h3>Constraints<\/h3>\n<ul>\n<li><b>1<\/b> \u2264 <b>T<\/b> \u2264 <b>10<sup>2<\/sup><\/b><\/li>\n<li>Subtask 1 (33 points) : <b>1<\/b> \u2264 sum of all <b>|S|<\/b>, sum of all <b>|T|<\/b> over a single test case \u2264 <b>10<sup>3<\/sup><\/b>, <b>1<\/b> \u2264 <b>|S|<\/b>, <b>|T|<\/b> \u2264 <b>10<sup>2<\/sup><\/b><\/li>\n<li>Subtask 2 (33 points) : <b>1<\/b> \u2264 sum of all <b>|S|<\/b>, sum of all <b>|T|<\/b> over a single test case \u2264 <b>10<sup>5<\/sup><\/b>, <b>1<\/b> \u2264 <b>|S|<\/b>, <b>|T|<\/b> \u2264 <b>10<sup>3<\/sup><\/b><\/li>\n<li>Subtask 3 (34 points) : <b>1<\/b> \u2264 sum of all <b>|S|<\/b>, sum of all <b>|T|<\/b> over a single test case \u2264 <b>10<sup>5<\/sup><\/b>, <b>1<\/b> \u2264 <b>|S|<\/b>, <b>|T|<\/b> \u2264 <b>10<sup>5<\/sup><\/b><\/li>\n<li>Total number of asterisks over all the test cases is at most <b>500<\/b>.<\/li>\n<\/ul>\n<h3>Example<\/h3>\n<pre><b>Input:<\/b>\n<tt>2\n*a*\nabacaba\n*a*b*\nabacaba<\/tt>\n\n<b>Output:<\/b>\n<tt>1 3 3 5 5 7 7\n2 6 6 6 6 -1 -1<\/tt>\n<\/pre><h3>Explanation<\/h3>\n<p><b>Example case 1.<\/b> Let us show that for every index <b>i<\/b> the value of <b>p<sub>i<\/sub><\/b> is correct:<\/p>\n<ul>\n<li><b>p<sub>1<\/sub><\/b> = 1. The corresponding substring <b>a<\/b> contains the string <b>a<\/b>. String <b>a<\/b> can be generated by replacing both asterisks with empty strings.<\/li>\n<li><b>p<sub>2<\/sub><\/b> = 3. The corresponding substring <b>ba<\/b> contains the string <b>a<\/b>.<\/li>\n<li><b>p<sub>3<\/sub><\/b> = 3. The corresponding substring <b>a<\/b> contains the string <b>a<\/b>.<\/li>\n<li><b>p<sub>4<sub><\/sub><\/sub><\/b> = 5. The corresponding substring <b>ca<\/b> contains the string <b>ca<\/b>. The string <b>ca<\/b> can be obtained if we replace the first asterisk with <b>c<\/b> and the second one with an empty string.<\/li>\n<li><b>p<sub>5<sub><\/sub><\/sub><\/b> = 5. The corresponding substring <b>a<\/b> contains the string <b>a<\/b>.<\/li>\n<li><b>p<sub>6<sub><\/sub><\/sub><\/b> = 7. The corresponding substring <b>ba<\/b> contains the string <b>ba<\/b>. The string <b>ba<\/b> can be obtained if we replace the first asterisk with <b>b<\/b> and the second one with an empty string.<\/li>\n<li><b>p<sub>7<sub><\/sub><\/sub><\/b> = 7. The corresponding substring <b>a<\/b> contains the string <b>a<\/b>.<\/li>\n<\/ul>\n\n<p><b>Example case 2.<\/b> Again, let's check for every <b>i<\/b>.<\/p>\n<ul>\n<li><b>p<sub>1<\/sub><\/b> = 2. The corresponding substring <b>ab<\/b> contains <b>ab<\/b>. The string <b>ab<\/b> can be obtained if we replace all the asterisks with empty strings.<\/li>\n<li><b>p<sub>2<\/sub><\/b> = 6. The corresponding substring <b>bacab<\/b> contains <b>acab<\/b>. The string <b>acab<\/b> can be obtained if we replace the first asterisk with an empty string, the second one with the string <b>ca<\/b> and the third one with an empty string.<\/li>\n<li><b>p<sub>3<sub><\/sub><\/sub><\/b> = 6. The corresponding substring <b>acab<\/b> contains <b>ab<\/b>. <\/li>\n<li><b>p<sub>4<sub><\/sub><\/sub><\/b> = 6. The corresponding substring <b>cab<\/b> contains <b>cab<\/b>. The string <b>cab<\/b> can be obtained if you replace the first asterisk with <b>c<\/b>, and the rest with empty strings. <\/li>\n<li><b>p<sub>5<sub><\/sub><\/sub><\/b> = 6. The corresponding substring <b>ab<\/b> contains <b>ab<\/b>.<\/li>\n<li><b>p<sub>6<sub><\/sub><\/sub><\/b> = <b>p<sub>7<sub><\/sub><\/sub><\/b> = -1. Neither <b>ba<\/b> nor <b>a<\/b> doesn't contain any substring, generated by <tt>*a*b*<\/tt>.<\/li>\n<\/ul>\n\n<p>You may have noted that in the explanation for the second test case, <b>ab<\/b> is also a correct substring generated by <b>T<\/b> for some positions, but some other string is listed. This is done on purpose, in order to show how the string <b>T<\/b> can generate various strings.\n<\/p>\n","languages_supported":"ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC","max_timelimit":"2","source_sizelimit":"50000","problem_author":"xcwgf666","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;<\/span><span>xcwgf666<\/span>","problem_tester":"logic_iu","problem_tester_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #1E7D22;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>2&#9733;<\/span><span>logic_iu<\/span>","date_added":"24-08-2015","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/kmp'>\n                    kmp\n                <\/a><a class='problem-tag-small ' href='\/tags\/problems\/ltime28'>\n                    ltime28\n                <\/a><a class='problem-tag-small ' href='\/tags\/problems\/medium-hard'>\n                    medium-hard\n                <\/a><a class='problem-tag-small ' href='\/tags\/problems\/pattern'>\n                    pattern\n                <\/a><a class='problem-tag-small ' href='\/tags\/problems\/string'>\n                    string\n                <\/a><a class='problem-tag-small ' href='\/tags\/problems\/xcwgf666'>\n                    xcwgf666\n                <\/a>","editorial_url":"http:\/\/discuss.codechef.com\/problems\/PATTMATC","user":{"username":null},"time":{"view_start_date":1440923400,"submit_start_date":1440923400,"visible_start_date":1440923400,"end_date":1735669800,"current":1493557845},"todo":false,"problem_status":"unattempted"}