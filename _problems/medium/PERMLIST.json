
{"category_name":"medium","status":"success","problem_code":"PERMLIST","problem_name":"Create Permutation","body":"<span class=\"solution-visible-txt\">All submissions for this problem are available.<\/span>###Read problems statements [Mandarin](http:\/\/www.codechef.com\/download\/translated\/LTIME69\/mandarin\/PERMLIST.pdf) , [Bengali](http:\/\/www.codechef.com\/download\/translated\/LTIME69\/bengali\/PERMLIST.pdf) , [Hindi](http:\/\/www.codechef.com\/download\/translated\/LTIME69\/hindi\/PERMLIST.pdf) , [Russian](http:\/\/www.codechef.com\/download\/translated\/LTIME69\/russian\/PERMLIST.pdf) and [Vietnamese](http:\/\/www.codechef.com\/download\/translated\/LTIME69\/vietnamese\/PERMLIST.pdf) as well.\n\nConsider a list $L$ of permutations, where a *permutation with length* $x$ denotes a permutation of integers $1$ through $x$ and the elements of this list are indexed starting from $1$. Initially, the list contains a single permutation with length $1$ (i.e. $L_1 = (1)$).\n\nYou may create new permutations and append them to $L$ using operations with the following form:\n- Choose two (not necessarily distinct) valid indices $i$ and $j$.\n- Let's denote the permutations $L_i$ and $L_j$ by $(A_1, A_2, \\ldots, A_S)$ and $(B_1, B_2, \\ldots, B_R)$ respectively.\n- Create a new permutation in one of the following ways (note that the permutations $L_i$ and $L_j$ in the list $L$ are not actually changed):\n    1. Add $S$ to each element of $L_j$, then concatenate $L_i$ and $L_j$, i.e. the resulting permutation is $C = (A_1, A_2, \\ldots, A_S, B_1 + S, B_2 + S, \\ldots, B_R + S)$. For example, if $L_i = (1, 4, 2, 3)$ and $L_j = (2, 1)$, then $C = (1, 4, 2, 3, 6, 5)$.\n    2. Add $R$ to each element of $L_i$, then concatenate $L_i$ and $L_j$, i.e. the resulting permutation is $C = (A_1 + R, A_2 + R, \\ldots, A_S + R, B_1, B_2, \\ldots, B_R)$. For example, if $L_i = (1, 4, 2, 3)$ and $L_j = (2, 1)$, then $C = (3, 6, 4, 5, 2, 1)$.\n- Append $C$ to $L$, i.e. if $L$ contained $p$ permutations before this operation, then $C$ becomes permutation $L_{p+1}$.\n\nYou are given a permutation $P = (P_1, P_2, \\ldots, P_N)$. You should create this permutation using at most $2N$ operations (the last of these operations must append $P$ to $L$) or determine that it is impossible. It is not required to use the minimum number of operations.\n\n### Input\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $P_1, P_2, \\ldots, P_N$.\n\n### Output\nFor each test case, if it is impossible to create the given permutation, print a single line containing the string `\"NO\"` (without quotes). Otherwise:\n- Print a line containing the string `\"YES\"` (without quotes).\n- Then, print a line containing a single integer $K$ \u2014 the number of operations you want to perform ($1 \\le K \\le 2N$).\n- Then, print $K$ lines. Each of these lines should contain three space-separated integers $i$, $j$ and $w$ describing one operation ($1 \\le w \\le 2$), where $w=1$ or $w=2$ denotes that you want to create the new permutation in the first way or the second way (described above), respectively.\n\nYour solution will be considered incorrect if either $i$ or $j$ is invalid for any of your operations or if at the end, the last permutation in the list is not equal to $P$.\n\n### Constraints\n- $1 \\le T \\le 1,000$\n- $2 \\le N \\le 10^6$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n### Subtasks\n**Subtask #1 (50 points):**\n- $N \\le 1,000$\n- the sum of $N$ over all test cases does not exceed $5,000$\n\n**Subtask #2 (50 points):** original constraints\n\n### Example Input\n```\n2\n3\n3 1 2\n4\n3 1 4 2\n```\n\n### Example Output\n```\nYES\n2\n1 1 1\n1 2 2\nNO\n```\n","languages_supported":"C, CPP14, JAVA, PYTH, PYTH 3.6, PYPY, CS2, PAS fpc, PAS gpc, RUBY, PHP, GO, NODEJS, HASK, rust, SCALA, swift, D, PERL, FORT, WSPC, ADA, CAML, ICK, BF, ASM, CLPS, PRLG, ICON, SCM qobi, PIKE, ST, NICE, LUA, BASH, NEM, LISP sbcl, LISP clisp, SCM guile, JS, ERL, TCL, kotlin, PERL6, TEXT, SCM chicken, PYP3, CLOJ, COB, FS","max_timelimit":"1","source_sizelimit":"50000","problem_author":"kingofnumbers","problem_author_html_handle":"<span \n            class='rating' \n            style='display: inline-block; \n                    font-size: 10px; \n                    background: #FF7F00;\n                    padding: 0 3px; \n                    line-height: 1.3; \n                    color: white;\n                    margin-right: 2px;'>6&#9733;<\/span><span>kingofnumbers<\/span>","problem_tester":null,"problem_tester_html_handle":"","date_added":"22-02-2019","tags":"<a class='problem-tag-small ' href='\/tags\/problems\/dsu'>dsu<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/kingofnumbers'>kingofnumbers<\/a>, <a class='problem-tag-small ' href='\/tags\/problems\/ltime69'>ltime69<\/a>","editorial_url":"https:\/\/discuss.codechef.com\/problems\/PERMLIST","time":{"view_start_date":1550941202,"submit_start_date":1550941202,"visible_start_date":1550941202,"end_date":1735669800,"current":1559472979},"user":{"username":"","access":"default"},"todo":false,"problem_status":"unattempted","is_direct_submittable":false}